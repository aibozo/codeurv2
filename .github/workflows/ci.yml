name: Lint & Unit Test
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: abatilo/actions-poetry@v3
      - run: poetry install
      - run: poetry run ruff check .
      - run: poetry run black --check .

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: sr
          POSTGRES_PASSWORD: srpass
          POSTGRES_DB: symbol_registry
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: abatilo/actions-poetry@v3
      - run: poetry install
      - run: |
          sudo apt-get update
          sudo apt-get install -y libgit2-dev
      - run: poetry run pytest apps/symbol_registry/tests -q
        env:
          DATABASE_URL: postgresql+asyncpg://sr:srpass@localhost:5432/symbol_registry
      - run: poetry run pytest apps/git_adapter/tests -q
      - run: poetry run pytest apps/rag_service/tests -q
      - run: poetry run pytest clients/rag_client/tests -q
      - run: poetry run pytest apps/orchestrator/tests -q
      - run: poetry run pytest clients/llm_client/tests -q
        env:
          LLM_BACKEND: dummy
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-dummy' }}
      - run: poetry run pytest apps/agents/request_planner/tests -q
        env:
          LLM_BACKEND: dummy
      - run: poetry run pytest clients/kafka_utils/tests -q
      - run: poetry run pytest apps/agents/code_planner/tests -q
      - run: poetry run pytest apps/agents/coding_agent/tests -q
        env:
          MOCK_LLM: "1"
      - run: poetry run pytest apps/git_cache/tests -q
      - run: poetry run pytest apps/ci_runner/tests -q

  build-images:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    strategy:
      matrix:
        service:
          - orchestrator
          - srm
          - rag_service
          - git_adapter
          - request_planner
          - code_planner
          - coding_agent
          - ci_runner
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build base image
        if: matrix.service == 'orchestrator'  # Only build once
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./images/python-poetry-base/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/python-poetry-base:3.11
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/python-poetry-base:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/python-poetry-base:cache,mode=max
          
      - name: Determine Dockerfile path
        id: dockerfile
        run: |
          if [[ "${{ matrix.service }}" == "srm" ]]; then
            echo "path=./apps/symbol_registry/Dockerfile.optimized" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" =~ ^(request_planner|code_planner|coding_agent)$ ]]; then
            echo "path=./apps/agents/${{ matrix.service }}/Dockerfile.optimized" >> $GITHUB_OUTPUT
          else
            echo "path=./apps/${{ matrix.service }}/Dockerfile.optimized" >> $GITHUB_OUTPUT
          fi
          
      - name: Build and push service image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.dockerfile.outputs.path }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:latest
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}/${{ matrix.service }}:cache
            type=registry,ref=ghcr.io/${{ github.repository }}/python-poetry-base:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/${{ matrix.service }}:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1